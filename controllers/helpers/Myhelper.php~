<?php
require_once 'sodaratualdb.php';
require_once 'processodb.php';
require_once 'parametrosdb.php';
require_once 'dadosderivadosdb.php';
require_once 'alertasdb.php';


class Zend_Controller_Action_Helper_Myhelper extends Zend_Controller_Action_Helper_Abstract {

    private function gravarlog($tipo, $msg, $modulo) {
        $_logger = Zend_Registry::get('logger');
        if (Zend_Auth::getInstance()->hasIdentity()) {
            $_logger->setEventItem('username', Zend_Auth::getInstance()->getIdentity()->login);
            $_logger->setEventItem('fkidusu', Zend_Auth::getInstance()->getIdentity()->idusu);
        } else {
            $_logger->setEventItem('username', 'convidado');
            $_logger->setEventItem('fkidusu', 0);
        }
        $_logger->setEventItem('userip', $_SERVER['REMOTE_ADDR']);
        $_logger->setEventItem('modulo', $modulo);

        $msg = substr($msg,0,500);
        if ($tipo == 'info') {
            $_logger->info($msg);
        }
        if ($tipo == 'err') {
            $_logger->err($msg);
        }
        if ($tipo == 'warn') {
            $_logger->warn($msg);
        }
    }

    private function arredonda($numero) {
        $resto = $numero % 10;
        if ($resto == 1) {
            $numero = $numero - 1;
        }
        if ($resto == 2) {
            $numero = $numero - 2;
        }
        if ($resto == 3) {
            $numero = $numero - 3;
        }
        if ($resto == 4) {
            $numero = $numero - 4;
        }
        if ($resto == 5) {
            $numero = $numero + 5;
        }
        if ($resto == 6) {
            $numero = $numero + 4;
        }
        if ($resto == 7) {
            $numero = $numero + 3;
        }
        if ($resto == 8) {
            $numero = $numero + 2;
        }
        if ($resto == 9) {
            $numero = $numero + 1;
        }
        return $numero;
    }

    public function valData($data) {
        // valida data no formato dd/mm/aaaa
        if (strlen($data) <> 10) {
            return false;
        }
        $dd = substr($data, 0, 2);
        $mm = substr($data, 3, 2);
        $aa = substr($data, 6, 4);

        if (is_numeric($dd) && is_numeric($mm) && is_numeric($aa)) {
            if ($dd < 0 || $dd > 31) {
                return false;
            } elseif ($mm < 0 || $mm > 12) {
                return false;
            } elseif ($aa<0){
                return false;
            }
            return true;
        }
        return true;
    }

    public function processalocal($local,$arq) {
        // esta função tem por finalidade ler o arquivo XML dos dados do SODAR
        // gravar no banco de dados, processar os dados derivados e os alertas

        $arq = APP_ROOT . '/public/xml/' . $local . '/geral/' . $arq;

        $this->gravarlog('info', "Processando arquivo $arq", 'Processamento');

        // lê arquivo xml recebido da localidade
        $xml = simplexml_load_file($arq);

        // formata a data do processamento

        $dtx =  str_replace("T"," ",$xml['datahora']);
        $dt = "'" . $dtx . "'";

        // monta comando SQL
        $sql = 'INSERT INTO sodar_atual VALUES ' ;
        foreach ($xml->Obs as $obs){

            $sql .="(DEFAULT, $dt, ";
            $sql .= $obs->z . ', ';
            $sql .= $obs->speed . ', ';
            $sql .= $obs->dir . ', ';
            $sql .= $obs->U . ', ';
            $sql .= $obs->V . ', ';
            $sql .= $obs->W . ', ';
            $sql .= $obs->sigU . ', ';
            $sql .= $obs->sigU_r . ', ';
            $sql .= $obs->sigV . ', ';
            $sql .= $obs->sigV_r . ', ';
            $sql .= $obs->sigW . ', ';
            $sql .= $obs->speed_ass . ', ';
            $sql .= $obs->dir_ass . ', ';
            $sql .= $obs->U_ass . ', ';
            $sql .= $obs->V_ass . ', ';
            $sql .= $obs->W_ass . ', ';
            $sql .= $obs->sigU_ass . ', ';
            $sql .= $obs->sigU_r_ass . ', ';
            $sql .= $obs->sigV_ass . ', ';
            $sql .= $obs->sigV_r_ass . ', ';
            $sql .= $obs->sigW_ass . ', ';
            $sql .= $obs->shear . ', ';
            $sql .= $obs->shearDir . ', ';
            $sql .= $obs->sigSpeed . ', ';
            $sql .= $obs->sigLat . ', ';
            $sql .= $obs->sigPhi . ', ';
            $sql .= $obs->sigTheta . ', ';
            $sql .= $obs->TI . ', ';
            $sql .= $obs->PGz . ', ';
            $sql .= $obs->TKE . ', ';
            $sql .= $obs->EDR . ', ';
            $sql .= $obs->bck_raw . ', ';
            $sql .= $obs->bck . ', ';
            $sql .= $obs->bck_ID . ', ';
            $sql .= $obs->CT2 . ', ';
            $sql .= $obs->error . ', ';
            $sql .= $obs->PG . ', ';
            $sql .= $obs->h_range . ', ';
            $sql .= $obs->h_inv . ', ';
            $sql .= $obs->h_mixing . ', ';
            $sql .= $obs->H . ', ';
            $sql .= $obs->u_estrela . ', ';
            $sql .= $obs->L_estrela . ', ';
            $sql .= "'" . $local . "'";
            $sql .= '), ';
        }
        $sql = rtrim($sql, ', ');

        // salva registros do arquivo xml no banco de dados - tabela: sodar_atual
        $sodar_atualdb = new sodaratualdb();
        try {
            $sodar_atualdb->gravar($sql);
        } catch (Exception $e) {
            $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
        }
        // atualiza a data de processamento - tabela: processamento
        $processadb = new processodb();
        $sql = "update processamento set datahora = " . $dt . " where local = '" . $local . "'";
        try {
            $processadb->gravar($sql);
        } catch (Exception $e) {
            $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
        }
        // atualiza dados derivados
        $sql = "UPDATE sodar_atual s SET U = ROUND(s.speed*SIN(RADIANS(s.dir)),2), V= ROUND(s.speed*COS(RADIANS(s.dir)),2) WHERE s.data=$dt and s.speed<99.99";
        try {
            $sodar_atualdb->gravar($sql);
        } catch (Exception $e) {
            $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
        }
        try { 
            $derivados1 = $sodar_atualdb->getDerivados1($dt);
            foreach ($derivados1 as $linha) {
                $data = $linha['data'];
                $z = $linha['z'];
                $dir = $linha['dir'];
                $speed = $linha['speed'];
    
                ##Orientaçao da pista de esquerda para a direita 
                
                ## Proa>=10 cauda>=2  traves>= 5
                
                $alinhado_real = number_format(cos(deg2rad($dir-70))*$speed/0.51444, 2);
                if($alinhado_real<0)
                {
                    $proa = number_format($alinhado_real*-1, 2);
                    $cauda = 0;
                }	
                else
                {
                    $cauda = number_format($alinhado_real, 2);
                    $proa = 0;
                }
                
                $traves_real = number_format(sin(deg2rad($dir-70))*$speed/0.51444, 2);	
                if($traves_real<0)
                {
                    $traves_esq = number_format($traves_real*-1, 2);
                    $traves_dir = 0;
                }	
                else
                {
                    $traves_dir = number_format($traves_real, 2);
                    $traves_esq = 0;
                }
                $sql = "INSERT INTO dados_derivados VALUES($alinhado_real, $traves_real, $cauda, $proa, $traves_dir, $traves_esq, '$data', $z, '$local' )";
                $sodar_atualdb->gravar($sql);
    
            }
        } catch (Exception $e) {
            $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
        }
        // calcula os alertas
        $this->calcalerta($dtx,$local);
        
        // gera entradas para a RNA
        system("python2.7 /var/www/html/SDPVA/application/python/escreve_entrada_altitude_RNA.py");
        
        // gera arquivos XML
        system("python2.7 /var/www/html/SDPVA/application/python/xml09/xml.py");
        system("python2.7 /var/www/html/SDPVA/application/python/xml27/xml.py");
        
        // gera gráficos
        system("python2.7 /var/www/html/SDPVA/application/python/barbela3h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/barbela6h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/barbela12h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/barbela24h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vetor3h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vetor6h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vetor12h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vetor24h.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_proa.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_proa_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_cauda.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_cauda_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_traves_dir.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_traves_dir_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_traves_esq.py");
        system("python2.7 /var/www/html/SDPVA/application/python/var_traves_esq_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_proa.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_proa_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_cauda.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_cauda_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_traves_dir.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_traves_dir_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_traves_esq.py");
        system("python2.7 /var/www/html/SDPVA/application/python/vel_traves_esq_27.py");
        system("python2.7 /var/www/html/SDPVA/application/python/windshear6x1.py");
        system("python2.7 /var/www/html/SDPVA/application/python/barbela.py");
        
        // envia arquivos XML (sendxml)
        

    }

    // calculo dos Alertas
    private function calcalerta($dthr,$local) {

        $arqdata = substr($dthr,0,4) . substr($dthr,5,2) . substr($dthr,8,2) .  substr($dthr,11,2) . substr($dthr,14,2);

        // variáveis
        $pista = '09';

        // le parametros
        $paramdb = new parametrosdb();
        $paramData = $paramdb->getParametros();

        // le dados_derivados
        $dadosderivadosdb = new dadosderivadosdb();

        // parametros
        $wind_var_cauda = $paramData['wind_var_cauda'];
        $wind_var_proa = $paramData['wind_var_proa'];
        $wind_var_traves = $paramData['wind_var_traves'];
        $wind_int_proa = $paramData['wind_int_alerta1_min'];
        $wind_int_cauda = $paramData['wind_int_alerta1_max'];
        $wind_int_traves = $paramData['wind_int_alerta2_max'];
        $wind_shear_interv1_max = $paramData['wind_shear_interv1_max'];
        $wind_shear_interv2_max = $paramData['wind_shear_interv2_max'];
        $wind_shear_interv3_max = $paramData['wind_shear_interv3_max'];

        // Velocidade de Cauda
        $dadosderivadosData = $dadosderivadosdb->getVelocidadeCauda($dthr);
        $dadosVelCauda = $dadosderivadosData['cauda'];
        $VelocidadeCauda = $this->fcalcula1($dadosVelCauda, $wind_int_cauda, $dadosderivadosData['altura']);

        // Velocidade de Proa
        $dadosderivadosData = $dadosderivadosdb->getVelocidadeProa($dthr);
        $dadosVelProa = $dadosderivadosData['proa'];
        $VelocidadeProa = $this->fcalcula1($dadosVelProa, $wind_int_proa, $dadosderivadosData['altura']);

        // Velocidade Través Esquerdo
        $dadosderivadosData = $dadosderivadosdb->getTravesEsquerdo($dthr);
        $dadosVelTravesEsquerdo = $dadosderivadosData['traves_esq'];
        $VelocidadeTravesEsquerdo = $this->fcalcula1($dadosVelTravesEsquerdo, $wind_int_traves, $dadosderivadosData['altura']);

        // Velocidade Través Direito
        $dadosderivadosData = $dadosderivadosdb->getTravesDireito($dthr);
        $dadosVelTravesDireito = $dadosderivadosData['traves_dir'];
        $VelocidadeTravesDireito = $this->fcalcula1($dadosVelTravesDireito, $wind_int_traves, $dadosderivadosData['altura']);

        // Variação de Cauda $var1 = $dadosVarCauda, $var2 = $wind_var_cauda, $var3 = $dadosderivadosData['altura']
        $dadosderivadosData = $dadosderivadosdb->getVariacaoCauda($dthr);
        $dadosVarCauda = $dadosderivadosData['var_cauda'];
        $VariacaoCauda = $this->fcalcula2($dadosVarCauda, $wind_var_cauda, $dadosderivadosData['altura']);

        // Variação de Proa
        $dadosderivadosData = $dadosderivadosdb->getVariacaoProa($dthr);
        $dadosVarProa = $dadosderivadosData['var_proa'];
        $VariacaoProa = $this->fcalcula2($dadosVarProa, $wind_var_proa, $dadosderivadosData['altura']);

        // Variação Través Direito
        $dadosderivadosData = $dadosderivadosdb->getVariacaoTravesDir($dthr);
        $dadosVarTravesDir = $dadosderivadosData['var_traves_dir'];
        $VariacaoTravesDir = $this->fcalcula2($dadosVarTravesDir, $wind_var_proa, $dadosderivadosData['altura']);

        // Variação Través Esquerdo
        $dadosderivadosData = $dadosderivadosdb->getVariacaoTravesEsq($dthr);
        $dadosVarTravesEsq = $dadosderivadosData['var_traves_esq'];
        $VariacaoTravesEsq = $this->fcalcula2($dadosVarTravesEsq, $wind_var_proa, $dadosderivadosData['altura']);

        // Windshear
        $dadosderivadosData = $dadosderivadosdb->getWindshear($dthr);
        $dadosWindshear = $dadosderivadosData['windshear'];

        switch ($dadosWindshear) {
            case ($dadosWindshear < $wind_shear_interv1_max):
                $tipow = 'Leve';
                $AlertaW = 0;
                break;
            case ($dadosWindshear >= $wind_shear_interv1_max && $dadosWindshear < $wind_shear_interv2_max):
                $tipow = 'Moderado';
                $AlertaW = 0;
                break;
            case ($dadosWindshear > $wind_shear_interv2_max && $dadosWindshear <= $wind_shear_interv3_max):
                $tipow = 'Forte';
                $AlertaW = 1;
                break;
            case ($dadosWindshear > $wind_shear_interv3_max):
                $tipow = 'Severo';
                $AlertaW = 1;
                break;
            default:
                break;
        }
        $txt = abs(number_format($dadosWindshear, 2)) . ' kt/100ft em ' . $this->arredonda(number_format($dadosderivadosData['altura'] / 0.3048, 0, '.', '')) . ' ft';
        $Windshear = $tipow . '<br>' . $txt;


        // salva alertas
        $alertadb = new alertasdb();
        $dtxml = substr($dthr,0,10) . "T" . substr($dthr,11,8);

        try {
            // grava dados processados na tabela processamento - pista 09
            $pista = '09';
            $velcauda = $dadosVelCauda;
            $velproa = $dadosVelProa;
            $velte = $dadosVelTravesEsquerdo;
            $veltd = $dadosVelTravesDireito;
            $varcauda = $dadosVarCauda;
            $varproa = $dadosVarProa;
            $vartd = $dadosVarTravesDir;
            $varte = $dadosVarTravesEsq;

            // verifica alertas
            $AlertaVelCauda = ($velcauda >= $wind_int_cauda) ? 1 : 0;
            $AlertaVelProa = ($velproa >= $wind_int_proa) ? 1 : 0;
            $AlertaVelTE = ($velte >= $wind_int_traves) ? 1 : 0;
            $AlertaVelTD = ($veltd >= $wind_int_traves) ? 1 : 0;
            $AlertaVC = ($varcauda >= $wind_var_cauda) ? 1 : 0;
            $AlertaVP = ($varproa >= $wind_var_proa) ? 1 : 0;
            $AlertaVTD = ($vartd >= $wind_var_traves) ? 1 : 0;
            $AlertaVTE = ($varte >= $wind_var_traves) ? 1 : 0;

            $data = [
                'datahora' => $dthr,
                'pista' => $pista,
                'local' => $local,
                'velocidadecauda' => $VelocidadeCauda,
                'velocidadeproa' => $VelocidadeProa,
                'velocidadetravesesquerdo' => $VelocidadeTravesEsquerdo,
                'velocidadetravesdireito' => $VelocidadeTravesDireito,
                'variacaocauda' => $VariacaoCauda,
                'variacaoproa' => $VariacaoProa,
                'variacaotravesesq' => $VariacaoTravesEsq,
                'variacaotravesdir' => $VariacaoTravesDir,
                'windshear' => $Windshear,
                'alertavelcauda' => $AlertaVelCauda,
                'alertavelproa' => $AlertaVelProa,
                'alertavelte' => $AlertaVelTE,
                'alertaveltd' => $AlertaVelTD,
                'alertavc' => $AlertaVC,
                'alertavp' => $AlertaVP,
                'alertavtd' => $AlertaVTD,
                'alertavte' => $AlertaVTE,
                'alertaw' => $AlertaW,
            ];
            try{
                $alertadb->insert($data);
                $this->gravarlog('info', "Alertas processados -  $local - pista 09 - $dthr", 'Processamento');
            } catch (Exception $e) {
                $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
            }

            // grava arquivo xml
            $xml = "<?xml version='1.0' encoding='UTF-8'?><sdpva local='SBGR' pista='" . $pista . " datahora='" . $dtxml . " tipo='A' >";
            $xml .= '<velcauda><valor>' . $VelocidadeCauda . '</valor><alerta>' . $AlertaVelCauda . '</alerta></velcauda>';
            $xml .= '<velproa><valor>' . $VelocidadeProa . '</valor><alerta>' . $AlertaVelProa . '</alerta></velproa>';
            $xml .= '<velte><valor>' . $VelocidadeTravesEsquerdo . '</valor><alerta>' . $AlertaVelTE . '</alerta></velte>';
            $xml .= '<veltd><valor>' . $VelocidadeTravesDireito . '</valor><alerta>' . $AlertaVelTD . '</alerta></veltd>';
            $xml .= '<varcauda><valor>' . $VariacaoCauda . '</valor><alerta>' . $AlertaVC . '</alerta></varcauda>';
            $xml .= '<varproa><valor>' . $VariacaoProa . '</valor><alerta>' . $AlertaVP . '</alerta></varproa>';
            $xml .= '<vartd><valor>' . $VariacaoTravesDir . '</valor><alerta>' . $AlertaVTD . '</alerta></vartd>';
            $xml .= '<varte><valor>' . $VariacaoTravesEsq . '</valor><alerta>' . $AlertaVTE . '</alerta></varte>';
            $xml .= '<windshear><valor>' . $tipow . ' - ' . $txt . '</valor><alerta>' . $AlertaW . '</alerta></windshear>';
            $xml .= '</sdpva>';

            $data = new Zend_Date($dthr);
            $filename = $arqdata . ".xml";
            $arq = APP_XML . $local . '/alertas/' . $pista . '/' . $filename;
            try {
                $hc = fopen($arq, 'wb');
                fwrite($hc, $xml);
                fclose($hc);
                $this->gravarlog('info', "Arquivo XML gerado $local  $arq", 'Processamento');
            } catch (Exception $e) {
                $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
            }

            // grava dados processados na tabela processamento - pista 27
            $pista = '27';
            $velcauda = $dadosVelProa;
            $velproa = $dadosVelCauda;
            $velte = $dadosVelTravesDireito;
            $veltd = $dadosVelTravesEsquerdo;
            $varcauda = $dadosVarProa;
            $varproa = $dadosVarCauda;
            $vartd = $dadosVarTravesEsq;
            $varte = $dadosVarTravesDir;

            // verifica alertas
            $AlertaVelCauda = ($velcauda >= $wind_int_cauda) ? 1 : 0;
            $AlertaVelProa = ($velproa >= $wind_int_proa) ? 1 : 0;
            $AlertaVelTE = ($velte >= $wind_int_traves) ? 1 : 0;
            $AlertaVelTD = ($veltd >= $wind_int_traves) ? 1 : 0;
            $AlertaVC = ($varcauda >= $wind_var_cauda) ? 1 : 0;
            $AlertaVP = ($varproa >= $wind_var_proa) ? 1 : 0;
            $AlertaVTD = ($vartd >= $wind_var_traves) ? 1 : 0;
            $AlertaVTE = ($varte >= $wind_var_traves) ? 1 : 0;

            $data = [
                'datahora' => $dthr,
                'pista' => $pista,
                'local' => $local,
                'velocidadecauda' => $VelocidadeProa,
                'velocidadeproa' => $VelocidadeCauda,
                'velocidadetravesesquerdo' => $VelocidadeTravesDireito,
                'velocidadetravesdireito' => $VelocidadeTravesEsquerdo,
                'variacaocauda' => $VariacaoProa,
                'variacaoproa' => $VariacaoCauda,
                'variacaotravesesq' => $VariacaoTravesDir,
                'variacaotravesdir' => $VariacaoTravesEsq,
                'windshear' => $Windshear,
                'alertavelcauda' => $AlertaVelCauda,
                'alertavelproa' => $AlertaVelProa,
                'alertavelte' => $AlertaVelTE,
                'alertaveltd' => $AlertaVelTD,
                'alertavc' => $AlertaVC,
                'alertavp' => $AlertaVP,
                'alertavtd' => $AlertaVTD,
                'alertavte' => $AlertaVTE,
                'alertaw' => $AlertaW,
            ];
            try {
                $alertadb->insert($data);
                $this->gravarlog('info', "Alertas processados $local - pista 27 -  $dthr", 'Processamento');
            } catch (Exception $e) {
                $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
            }

            // grava arquivo xml
            $xml = "<?xml version='1.0' encoding='UTF-8'?><sdpva local='SBGR' pista='" . $pista . " datahora='" . $dtxml . " tipo='A' >";
            $xml .= '<velcauda><valor>' . $VelocidadeProa . '</valor><alerta>' . $AlertaVelProa . '</alerta></velcauda>';
            $xml .= '<velproa><valor>' . $VelocidadeCauda . '</valor><alerta>' . $AlertaVelCauda . '</alerta></velproa>';
            $xml .= '<velte><valor>' . $VelocidadeTravesDireito . '</valor><alerta>' . $AlertaVelTD . '</alerta></velte>';
            $xml .= '<veltd><valor>' . $VelocidadeTravesEsquerdo . '</valor><alerta>' . $AlertaVelTE . '</alerta></veltd>';
            $xml .= '<varcauda><valor>' . $VariacaoProa . '</valor><alerta>' . $AlertaVP . '</alerta></varcauda>';
            $xml .= '<varproa><valor>' . $VariacaoCauda . '</valor><alerta>' . $AlertaVC . '</alerta></varproa>';
            $xml .= '<vartd><valor>' . $VariacaoTravesEsq . '</valor><alerta>' . $AlertaVTE . '</alerta></vartd>';
            $xml .= '<varte><valor>' . $VariacaoTravesDir . '</valor><alerta>' . $AlertaVTD . '</alerta></varte>';
            $xml .= '<windshear><valor>' . $tipow . ' - ' . $txt . '</valor><alerta>' . $AlertaW . '</alerta></windshear>';
            $xml .= '</sdpva>';

            $data = new Zend_Date($dthr);
            $filename = $arqdata . ".xml";
            $arq = APP_XML . $local . '/alertas/' . $pista . '/' . $filename;
            try {
                $hc = fopen($arq, 'wb');
                fwrite($hc, $xml);
                fclose($hc);
                $this->gravarlog('info', "Arquivo XML gerado  $local  -  $arq", 'Processamento');
            } catch (Exception $e) {
                $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
            }
        } catch (Exception $e) {
            $this->gravarlog('err', utf8_encode($e->getMessage()), 'Processamento');
        }
    }
    
    private function fcalcula1($var1, $var2, $var3) {
        if ($var1 >= $var2) {
            $txt = number_format($var1, 0) . ' kt em ' . $this->arredonda(number_format($var3 / 0.3048, 0, '.', '')) . ' ft';
        } else {
            $txt = abs(number_format($var1, 0)) . ' kt';
            if (number_format($var1, 0) != 0) {
                $txt .= ' em ' . $this->arredonda(number_format($var3 / 0.3048, 0, '.', '')) . ' ft';
            }
        }
        return $txt;
    }

    private function fcalcula2($var1, $var2, $var3) {
        $txt = number_format($var1, 0) . ' kt ';
        if ($var1 >= $var2) {
            $txt .= 'em ' . $this->arredonda(number_format($var3 / 0.3048, 0, '.', '')) . ' ft';
        } else {
            if (number_format($var1, 0) != 0) {
                $txt .= 'em ' . $this->arredonda(number_format($var3 / 0.3048, 0, '.', '')) . ' ft';
            }
        }
        return $txt;
    }

}
